use std::convert::From;
use std::sync::Arc;

use glam::u32;
use jni::JNIEnv;
use jni::objects::{JObject};
use jni::sys::{jint, jlong};


use crate::java_util::{arc_dispose_handle, arc_from_handle, arc_to_handle, JavaHandle, set_joml_vector2f};

pub struct TextureResource {
    pub texture: wgpu::Texture,
}

impl TextureResource {

}

impl JavaHandle<Arc<TextureResource>> for TextureResource {
    fn from_handle(ptr: jni::sys::jlong) -> Option<Arc<TextureResource>> {
        arc_from_handle(ptr)
    }

    fn to_handle(from: Arc<TextureResource>) -> jni::sys::jlong {
        arc_to_handle(from)
    }

    fn drop_handle(ptr: jni::sys::jlong) {
        arc_dispose_handle::<TextureResource>(ptr);
    }
}

fn wgpu_texture_desc<'local, 'ret>(mut env: JNIEnv, obj: &JObject) -> wgpu::TextureDescriptor<'ret> {
    let width = env.get_field(obj, "width", "I").unwrap().i().unwrap();
    let height = env.get_field(obj, "height", "I").unwrap().i().unwrap();
    let layer = env.get_field(obj, "layers", "I").unwrap().i().unwrap();
    let texture_dim = env.get_field(obj, "dim", "I").unwrap().i().unwrap();
    let format = env.get_field(obj, "format", "I").unwrap().i().unwrap();

    let texture_format : wgpu::TextureFormat = unsafe { std::mem::transmute::<jint, JavaImageFormat>(format) }.into();
    let texture_dim : wgpu::TextureDimension = unsafe { std::mem::transmute::<jint, JavaTextureDim> (texture_dim) }.into();
    
    wgpu::TextureDescriptor {
        size: wgpu::Extent3d {
            width: width as u32,
            height: height as u32,
            depth_or_array_layers: layer as u32 
        },
        mip_level_count: 1,
        sample_count: 1,
        dimension: texture_dim,
        format: texture_format,
        usage: wgpu::TextureUsages::TEXTURE_BINDING | wgpu::TextureUsages::COPY_DST,
        label: None,
        view_formats: &[],
    }
}



#[repr(u32)]
enum JavaTextureDim {
    DIM_1D,
    DIM_2D,
    DIM_3D
}

impl From<JavaTextureDim> for wgpu::TextureDimension {
    fn from(item: JavaTextureDim) -> Self {
       match item {
           JavaTextureDim::DIM_1D => wgpu::TextureDimension::D1, 
           JavaTextureDim::DIM_2D => wgpu::TextureDimension::D2, 
           JavaTextureDim::DIM_3D => wgpu::TextureDimension::D3, 
        }
    }
}

#[repr(u32)]
enum JavaImageFormat {
    UNKNOWN,
    R8_UNORM,
    R8_SNORM,
    R8_UINT,
    R8_SINT,
    R8G8_UNORM,
    R8G8_SNORM,
    R8G8_UINT,
    R8G8_SINT,
    R16_UNORM,
    R16_SNORM,
    R16_UINT,
    R16_SINT,
    R8G8B8A8_UNORM,
    R8G8B8A8_SNORM,
    R8G8B8A8_UINT,
    R8G8B8A8_SINT,
    R8G8B8A8_SRGB,
}

trait TextureFormatExt {
    fn bit_size_block(&self) -> u32;
}

impl TextureFormatExt for wgpu::TextureFormat {

    fn bit_size_block(&self) -> u32 {
       //TODO: incomplete
       match self {
            wgpu::TextureFormat::R8Unorm |
                wgpu::TextureFormat::R8Sint |
                wgpu::TextureFormat::R8Snorm => 8,
            wgpu::TextureFormat::Rgba8Unorm |
                wgpu::TextureFormat::Rgba8Sint |
                wgpu::TextureFormat::Rgba8Uint |
                wgpu::TextureFormat::Rgba8UnormSrgb => 32, 
            _ => 0
        } 
    }
}

impl From<JavaImageFormat> for wgpu::TextureFormat {
    fn from(item: JavaImageFormat) -> Self {
        match item {
            JavaImageFormat::R8_UNORM => wgpu::TextureFormat::R8Unorm,
            JavaImageFormat::R8_SNORM => wgpu::TextureFormat::R8Snorm,
            JavaImageFormat::R8_UINT => wgpu::TextureFormat::R8Uint,
            JavaImageFormat::R8_SINT => wgpu::TextureFormat::R8Sint,
            JavaImageFormat::R8G8_UNORM => wgpu::TextureFormat::Rg8Unorm,
            JavaImageFormat::R8G8_SNORM => wgpu::TextureFormat::Rg8Snorm,
            JavaImageFormat::R8G8_UINT => wgpu::TextureFormat::Rg8Uint,
            JavaImageFormat::R8G8_SINT => wgpu::TextureFormat::Rg8Sint,

            JavaImageFormat::R16_UNORM => wgpu::TextureFormat::R16Unorm,
            JavaImageFormat::R16_SNORM => wgpu::TextureFormat::R16Snorm,
            JavaImageFormat::R16_UINT => wgpu::TextureFormat::R16Uint,
            JavaImageFormat::R16_SINT => wgpu::TextureFormat::R16Sint,

            JavaImageFormat::R8G8B8A8_UNORM => wgpu::TextureFormat::Rgba8Unorm,
            JavaImageFormat::R8G8B8A8_SNORM => wgpu::TextureFormat::Rgba8Snorm,
            JavaImageFormat::R8G8B8A8_UINT => wgpu::TextureFormat::Rgba8Uint,
            JavaImageFormat::R8G8B8A8_SINT => wgpu::TextureFormat::Rgba8Sint,
            JavaImageFormat::R8G8B8A8_SRGB => wgpu::TextureFormat::Rgba8UnormSrgb,
            _ => panic!("invalid image format"),
        }
    }
}

